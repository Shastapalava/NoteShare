function Approve_membership(email)
    Assert email is valid otherwise
        return ("Invalid email!")
    If email is in user_DB then
        return ("User already exists!")
    user_DB.add_record(email)
    return ("User was added successfully and notified!")

function Ban_user(userId)
    Assert userId is valid otherwise
        return("Invalid userId!")
    If userId is in user_DB then
        set to_ban to user_DB.pop_record(userId)
        banned_users.add_record(userId)
        return ("User was sucessfully banned.")
    return ("User is not in the user_DB")

function Taboo_word(word)
    Asssert word is valid otherwise
        return("Invalid word format!")
    If word is in the taboo_DB then
        return("Word already banned!")
    taboo_DB.add(word)
    return("Word banned successfully!")

function Taboo_suggested_word(word)
    return call Taboo_word(word)

function Remove_from_taboo(word)
    Assert word is valid otherwise
        return("Invalid word format!")
    If word is in taboo_DB then
        taboo_DB.delete(word)
        return("Word succesfully unbanned!")
    return("Something went wrong, this word is not taboo")

function Un_lock_doc(docId)
    Assert docId is valid otherwise
        return ("Invalid document reference!")
    If doc_DB.find_record(docId).get_status() is unlocked then
        set doc.set_status() to locked
        return ("Document locked succesfully!")
    set doc_DB.find_record(docId).set_status() to unlocked
    return ("Document unlocked sucessfully!")

function Un_lock_attempt(userId, doc)
    Assert userId is valid otherwise
        return ("Invalid userId!")
    If user_DB.find_record(userId).get_status is admin then
        return call Unlock_doc(doc)
    If user_DB.find_record(userId).get_docs.find(doc) is true then
        return call Unlock_doc(doc)
    return ("This user does not have (un)lock access to the document")

function Issue_a_warning(userId, message)
    Assert userId is valid otherwise
        return ("Invalid userId!")
    If len(user_DB.find_record(userId).get_warnings) is >= 3 then
        return call Ban_user(userId)
    user_DB.find_record(userId).get_warnings.append(message)
    return("User has been warned!")

function Create_new_doc(userId, docName)
    Assert userID is in user_DB otherwise
        return ("Invalid userId!")
    Assert docName is valid otherwise
        return ("Invalid document name format!")
    If doc_DB.find_record(docName) is true then
        return ("This name is already taken!")
    set new_docId to doc_DB.add_record(docName).get_Id()
    user_DB.find_record(userId).docs.append(new_docId)
    return ("New document created successfully!")


